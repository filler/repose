<ruleset xmlns="http://codenarc.org/ruleset/1.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://codenarc.org/ruleset/1.0 http://codenarc.org/ruleset-schema.xsd"
         xsi:noNamespaceSchemaLocation="http://codenarc.org/ruleset-schema.xsd">

    <description>Sample rule set</description>

    <rule class='org.codenarc.rule.formatting.SpaceAfterIfRule'>
        <property name='priority' value='1'/>
    </rule>

    <rule class='org.codenarc.rule.formatting.SpaceAfterForRule'>
        <property name='priority' value='1'/>
    </rule>

    <rule class='org.codenarc.rule.formatting.SpaceAfterWhileRule'>
        <property name='priority' value='1'/>
    </rule>

    <rule class='org.codenarc.rule.formatting.SpaceAfterSwitchRule'>
        <property name='priority' value='1'/>
    </rule>

    <rule class='org.codenarc.rule.formatting.SpaceAfterCatchRule'>
        <property name='priority' value='1'/>
    </rule>

    <rule class='org.codenarc.rule.formatting.SpaceAroundOperatorRule'>
        <property name='priority' value='1'/>
    </rule>

    <rule class='org.codenarc.rule.formatting.SpaceAfterCommaRule'>
        <property name='priority' value='1'/>
    </rule>

    <rule class='org.codenarc.rule.formatting.SpaceAfterSemicolonRule'>
        <property name='priority' value='1'/>
    </rule>

    <rule class='org.codenarc.rule.formatting.BracesForClassRule'>
        <property name='priority' value='1'/>
    </rule>

    <rule class='org.codenarc.rule.formatting.BracesForForLoopRule'>
        <property name='priority' value='1'/>
    </rule>

    <rule class='org.codenarc.rule.formatting.BracesForIfElseRule'>
        <property name='priority' value='1'/>
    </rule>

    <rule class='org.codenarc.rule.formatting.BracesForMethodRule'>
        <property name='priority' value='1'/>
    </rule>

    <rule class='org.codenarc.rule.formatting.BracesForTryCatchFinallyRule'>
        <property name='priority' value='1'/>
    </rule>

    <rule class='org.codenarc.rule.generic.IllegalRegexRule'>
        <property name="name" value="Max 2 blank lines before }"/>
        <property name='regex' value='\n\n\n(\n)+.*\}'/>
        <property name='priority' value='1'/>
    </rule>

    <rule class='org.codenarc.rule.formatting.MissingBlankLineAfterPackageRule'>
        <property name='priority' value='1'/>
    </rule>

    <rule class='org.codenarc.rule.formatting.MissingBlankLineAfterImportsRule'>
        <property name='priority' value='1'/>
    </rule>

    <!-- This might have to stay gone -->
    <!-- reformat isn't removing extra blank lines in groovy -->

    <!--rule class='org.codenarc.rule.generic.IllegalRegexRule'>
        <property name="name" value="Maximum two blank lines in a row"/>
        <property name='regex' value='\n\n\n\n'/>
        <property name='priority' value='1'/>
    </rule-->

    <rule class='org.codenarc.rule.generic.IllegalRegexRule'>
        <property name="name" value="Require space before else"/>
        <property name='regex' value='[^\s-]else'/>
        <property name='priority' value='1'/>
    </rule>

    <rule class='org.codenarc.rule.generic.IllegalRegexRule'>
        <property name="name" value="Require space before catch"/>
        <property name='regex' value='[^\s-"]catch'/>
        <property name='priority' value='1'/>
    </rule>

    <rule class='org.codenarc.rule.generic.IllegalRegexRule'>
        <property name="name" value="Require space before finally"/>
        <property name='regex' value='[^\s-]finally'/>
        <property name='priority' value='1'/>
    </rule>

    <!-- this needs to exclude ({ situations
    but we also have to avoid strings and comments :(-->

    <!-- this one is working luckily -->
    <rule class='org.codenarc.rule.generic.IllegalRegexRule'>
        <property name="name" value="Require space before { unless in a string"/>
        <property name='regex' value='(^("[^"]*")+[^"]*[^\s-&lt;\(]\{)|^[^"]*[^\s-&lt;\(]\{'/>
        <property name='priority' value='1'/>
    </rule>

    <!--rule class='org.codenarc.rule.formatting.SpaceAfterOpeningBraceRule'>
        <property name='priority' value='1'/>
    </rule-->

    <!--rule class='org.codenarc.rule.formatting.SpaceBeforeClosingBraceRule'>
        <property name='priority' value='1'/>
    </rule-->

    <!-- these suck because {} is 2 violations...and reformatting { } changes it back to {} -->

    <!-- BRING THIS ONE BACK -->

    <rule class='org.codenarc.rule.generic.IllegalRegexRule'>
        <property name="name" value="Require space before } unless in a string"/>
        <property name='regex' value='(^("[^"]*")+[^"]*[^\s-&lt;\(\{]\})|^[^"]*[^\s-&lt;\(\{]\}'/>
        <property name='priority' value='1'/>
    </rule>

    <!-- BRING THIS ONE BACK -->

    <rule class='org.codenarc.rule.generic.IllegalRegexRule'>
        <property name="name" value="Require space after { unless in a string"/>
        <property name='regex' value='(^("[^"]*")+[^"]*[^\s-&lt;\(\{]\})|^[^"]*[^\s-&lt;\(\{]\}'/>
        <property name='priority' value='1'/>
    </rule>

    <!-- BRING THIS ONE BACK -->
    <!-- make it ignore comments somehow too -->
    <rule class='org.codenarc.rule.generic.IllegalRegexRule'>
        <property name="name" value="Require space before ? unless in a string"/>
        <property name='regex' value='(^("[^"]*")+[^"]*[^\s-&lt;]\?[^\n"]*:)|^[^"]*[^\s-&lt;]\?[^\n"]*:'/>
        <property name='priority' value='1'/>
    </rule>
    <!-- ^((?!/*).)*$ (something like this???)-->

    <rule class='org.codenarc.rule.generic.IllegalRegexRule'>
        <property name="name" value="Require space before paren after synchronized"/>
        <property name='regex' value='synchronized\('/>
        <property name='priority' value='1'/>
    </rule>

</ruleset>