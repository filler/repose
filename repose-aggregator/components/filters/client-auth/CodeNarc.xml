<?xml version='1.0'?>
<CodeNarc url='http://www.codenarc.org' version='0.21'><Report timestamp='Oct 1, 2014 4:40:28 PM'/><Project title='Repose Components - Client Authentication'><SourceDirectory>src/test/groovy</SourceDirectory></Project><PackageSummary totalFiles='1' filesWithViolations='1' priority1='7' priority2='0' priority3='0'></PackageSummary><Package path='' totalFiles='1' filesWithViolations='1' priority1='7' priority2='0' priority3='0'><File name='GroovClass.groovy'><Violation ruleName='MissingBlankLineAfterPackage' priority='1' lineNumber='0'><SourceLine><![CDATA[package a
import groovy.json.JsonBuilder]]></SourceLine><Message><![CDATA[Match found for illegal regular expression "package.*\n.*"]]></Message></Violation><Violation ruleName='MissingBlankLineAfterImport' priority='1' lineNumber='1'><SourceLine><![CDATA[import groovy.json.JsonBuilder
class GroovClass{]]></SourceLine><Message><![CDATA[Match found for illegal regular expression "import.*\n.*"]]></Message></Violation><Violation ruleName='Blanks around class or method' priority='1' lineNumber='2'><SourceLine><![CDATA[class GroovClass{
    void hello() {
        println "hello, world"
        boolean x = true;
        if(x){

        }else {

        }

        JsonBuilder jb = new JsonBuilder()

        int j = 0
        int m = 0

        for(int i = 0; i < 10; i++){
            println "for"
            j = i == 2? 2 : 3;
            m = i == 2 ? 2 :3;
        }
        println j
        println m






    }
}]]></SourceLine><Message><![CDATA[Match found for illegal regular expression "class.*\{(.|\n|\s)*\}\n[^\s-]|[^\s-]\n.*def|def.*\{(.|\n|\s)*\}\n[^\s-]|[^\s-]\n.*def"]]></Message></Violation><Violation ruleName='Require space before else, catch, or finally' priority='1' lineNumber='8'><SourceLine><![CDATA[}else]]></SourceLine><Message><![CDATA[Match found for illegal regular expression "[^\s-]else|[^\s-]catch|[^\s-]finally"]]></Message></Violation><Violation ruleName='Require space before and after a ?' priority='1' lineNumber='19'><SourceLine><![CDATA[2?]]></SourceLine><Message><![CDATA[Match found for illegal regular expression "[^\s-]\?|\?[^\s-]"]]></Message></Violation><Violation ruleName='Require space before and after a :' priority='1' lineNumber='20'><SourceLine><![CDATA[:3]]></SourceLine><Message><![CDATA[Match found for illegal regular expression "[^\s-]:|:[^\s-]"]]></Message></Violation><Violation ruleName='Max 2 blank lines before }' priority='1' lineNumber='23'><SourceLine><![CDATA[






    }]]></SourceLine><Message><![CDATA[Match found for illegal regular expression "\n\n\n(\n)+.*\}"]]></Message></Violation></File></Package><Rules><Rule name='Blanks around class or method'><Description><![CDATA[No description provided for rule named [Blanks around class or method]]]></Description></Rule><Rule name='Max 2 blank lines before }'><Description><![CDATA[No description provided for rule named [Max 2 blank lines before }]]]></Description></Rule><Rule name='MissingBlankLineAfterImport'><Description><![CDATA[No description provided for rule named [MissingBlankLineAfterImport]]]></Description></Rule><Rule name='MissingBlankLineAfterPackage'><Description><![CDATA[Makes sure there is a blank line after the package statement of a source code file.]]></Description></Rule><Rule name='Require space before and after a :'><Description><![CDATA[No description provided for rule named [Require space before and after a :]]]></Description></Rule><Rule name='Require space before and after a ?'><Description><![CDATA[No description provided for rule named [Require space before and after a ?]]]></Description></Rule><Rule name='Require space before else, catch, or finally'><Description><![CDATA[No description provided for rule named [Require space before else, catch, or finally]]]></Description></Rule></Rules></CodeNarc>